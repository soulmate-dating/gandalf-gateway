// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: internal/ports/grpc/profiles.proto

package profiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileServiceClient interface {
	CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	GetMultipleProfiles(ctx context.Context, in *GetMultipleProfilesRequest, opts ...grpc.CallOption) (*MultipleProfilesResponse, error)
	GetRandomProfilePreferredByUser(ctx context.Context, in *GetRandomProfilePreferredByUserRequest, opts ...grpc.CallOption) (*FullProfileResponse, error)
	GetFullProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*FullProfileResponse, error)
	GetPrompts(ctx context.Context, in *GetPromptsRequest, opts ...grpc.CallOption) (*PromptsResponse, error)
	AddPrompts(ctx context.Context, in *AddPromptsRequest, opts ...grpc.CallOption) (*PromptsResponse, error)
	AddFilePrompt(ctx context.Context, in *AddFilePromptRequest, opts ...grpc.CallOption) (*SinglePromptResponse, error)
	UpdateFilePrompt(ctx context.Context, in *UpdateFilePromptRequest, opts ...grpc.CallOption) (*SinglePromptResponse, error)
	UpdatePrompt(ctx context.Context, in *UpdatePromptRequest, opts ...grpc.CallOption) (*SinglePromptResponse, error)
	UpdatePromptsPositions(ctx context.Context, in *UpdatePromptsPositionsRequest, opts ...grpc.CallOption) (*PromptsResponse, error)
	DeletePrompt(ctx context.Context, in *DeletePromptRequest, opts ...grpc.CallOption) (*SinglePromptResponse, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfileService/CreateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfileService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfileService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetMultipleProfiles(ctx context.Context, in *GetMultipleProfilesRequest, opts ...grpc.CallOption) (*MultipleProfilesResponse, error) {
	out := new(MultipleProfilesResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfileService/GetMultipleProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetRandomProfilePreferredByUser(ctx context.Context, in *GetRandomProfilePreferredByUserRequest, opts ...grpc.CallOption) (*FullProfileResponse, error) {
	out := new(FullProfileResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfileService/GetRandomProfilePreferredByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetFullProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*FullProfileResponse, error) {
	out := new(FullProfileResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfileService/GetFullProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetPrompts(ctx context.Context, in *GetPromptsRequest, opts ...grpc.CallOption) (*PromptsResponse, error) {
	out := new(PromptsResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfileService/GetPrompts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) AddPrompts(ctx context.Context, in *AddPromptsRequest, opts ...grpc.CallOption) (*PromptsResponse, error) {
	out := new(PromptsResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfileService/AddPrompts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) AddFilePrompt(ctx context.Context, in *AddFilePromptRequest, opts ...grpc.CallOption) (*SinglePromptResponse, error) {
	out := new(SinglePromptResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfileService/AddFilePrompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateFilePrompt(ctx context.Context, in *UpdateFilePromptRequest, opts ...grpc.CallOption) (*SinglePromptResponse, error) {
	out := new(SinglePromptResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfileService/UpdateFilePrompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdatePrompt(ctx context.Context, in *UpdatePromptRequest, opts ...grpc.CallOption) (*SinglePromptResponse, error) {
	out := new(SinglePromptResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfileService/UpdatePrompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdatePromptsPositions(ctx context.Context, in *UpdatePromptsPositionsRequest, opts ...grpc.CallOption) (*PromptsResponse, error) {
	out := new(PromptsResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfileService/UpdatePromptsPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) DeletePrompt(ctx context.Context, in *DeletePromptRequest, opts ...grpc.CallOption) (*SinglePromptResponse, error) {
	out := new(SinglePromptResponse)
	err := c.cc.Invoke(ctx, "/profiles.ProfileService/DeletePrompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
// All implementations must embed UnimplementedProfileServiceServer
// for forward compatibility
type ProfileServiceServer interface {
	CreateProfile(context.Context, *CreateProfileRequest) (*ProfileResponse, error)
	GetProfile(context.Context, *GetProfileRequest) (*ProfileResponse, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*ProfileResponse, error)
	GetMultipleProfiles(context.Context, *GetMultipleProfilesRequest) (*MultipleProfilesResponse, error)
	GetRandomProfilePreferredByUser(context.Context, *GetRandomProfilePreferredByUserRequest) (*FullProfileResponse, error)
	GetFullProfile(context.Context, *GetProfileRequest) (*FullProfileResponse, error)
	GetPrompts(context.Context, *GetPromptsRequest) (*PromptsResponse, error)
	AddPrompts(context.Context, *AddPromptsRequest) (*PromptsResponse, error)
	AddFilePrompt(context.Context, *AddFilePromptRequest) (*SinglePromptResponse, error)
	UpdateFilePrompt(context.Context, *UpdateFilePromptRequest) (*SinglePromptResponse, error)
	UpdatePrompt(context.Context, *UpdatePromptRequest) (*SinglePromptResponse, error)
	UpdatePromptsPositions(context.Context, *UpdatePromptsPositionsRequest) (*PromptsResponse, error)
	DeletePrompt(context.Context, *DeletePromptRequest) (*SinglePromptResponse, error)
	mustEmbedUnimplementedProfileServiceServer()
}

// UnimplementedProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfileServiceServer struct {
}

func (UnimplementedProfileServiceServer) CreateProfile(context.Context, *CreateProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedProfileServiceServer) GetProfile(context.Context, *GetProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedProfileServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedProfileServiceServer) GetMultipleProfiles(context.Context, *GetMultipleProfilesRequest) (*MultipleProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultipleProfiles not implemented")
}
func (UnimplementedProfileServiceServer) GetRandomProfilePreferredByUser(context.Context, *GetRandomProfilePreferredByUserRequest) (*FullProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomProfilePreferredByUser not implemented")
}
func (UnimplementedProfileServiceServer) GetFullProfile(context.Context, *GetProfileRequest) (*FullProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullProfile not implemented")
}
func (UnimplementedProfileServiceServer) GetPrompts(context.Context, *GetPromptsRequest) (*PromptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrompts not implemented")
}
func (UnimplementedProfileServiceServer) AddPrompts(context.Context, *AddPromptsRequest) (*PromptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPrompts not implemented")
}
func (UnimplementedProfileServiceServer) AddFilePrompt(context.Context, *AddFilePromptRequest) (*SinglePromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFilePrompt not implemented")
}
func (UnimplementedProfileServiceServer) UpdateFilePrompt(context.Context, *UpdateFilePromptRequest) (*SinglePromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilePrompt not implemented")
}
func (UnimplementedProfileServiceServer) UpdatePrompt(context.Context, *UpdatePromptRequest) (*SinglePromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrompt not implemented")
}
func (UnimplementedProfileServiceServer) UpdatePromptsPositions(context.Context, *UpdatePromptsPositionsRequest) (*PromptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePromptsPositions not implemented")
}
func (UnimplementedProfileServiceServer) DeletePrompt(context.Context, *DeletePromptRequest) (*SinglePromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrompt not implemented")
}
func (UnimplementedProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {}

// UnsafeProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceServer will
// result in compilation errors.
type UnsafeProfileServiceServer interface {
	mustEmbedUnimplementedProfileServiceServer()
}

func RegisterProfileServiceServer(s grpc.ServiceRegistrar, srv ProfileServiceServer) {
	s.RegisterService(&ProfileService_ServiceDesc, srv)
}

func _ProfileService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfileService/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CreateProfile(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfileService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfileService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetMultipleProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultipleProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetMultipleProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfileService/GetMultipleProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetMultipleProfiles(ctx, req.(*GetMultipleProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetRandomProfilePreferredByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomProfilePreferredByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetRandomProfilePreferredByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfileService/GetRandomProfilePreferredByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetRandomProfilePreferredByUser(ctx, req.(*GetRandomProfilePreferredByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetFullProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetFullProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfileService/GetFullProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetFullProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetPrompts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPromptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetPrompts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfileService/GetPrompts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetPrompts(ctx, req.(*GetPromptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_AddPrompts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPromptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).AddPrompts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfileService/AddPrompts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).AddPrompts(ctx, req.(*AddPromptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_AddFilePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFilePromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).AddFilePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfileService/AddFilePrompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).AddFilePrompt(ctx, req.(*AddFilePromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateFilePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilePromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateFilePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfileService/UpdateFilePrompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateFilePrompt(ctx, req.(*UpdateFilePromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdatePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdatePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfileService/UpdatePrompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdatePrompt(ctx, req.(*UpdatePromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdatePromptsPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePromptsPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdatePromptsPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfileService/UpdatePromptsPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdatePromptsPositions(ctx, req.(*UpdatePromptsPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_DeletePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).DeletePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.ProfileService/DeletePrompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).DeletePrompt(ctx, req.(*DeletePromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileService_ServiceDesc is the grpc.ServiceDesc for ProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profiles.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProfile",
			Handler:    _ProfileService_CreateProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _ProfileService_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ProfileService_UpdateProfile_Handler,
		},
		{
			MethodName: "GetMultipleProfiles",
			Handler:    _ProfileService_GetMultipleProfiles_Handler,
		},
		{
			MethodName: "GetRandomProfilePreferredByUser",
			Handler:    _ProfileService_GetRandomProfilePreferredByUser_Handler,
		},
		{
			MethodName: "GetFullProfile",
			Handler:    _ProfileService_GetFullProfile_Handler,
		},
		{
			MethodName: "GetPrompts",
			Handler:    _ProfileService_GetPrompts_Handler,
		},
		{
			MethodName: "AddPrompts",
			Handler:    _ProfileService_AddPrompts_Handler,
		},
		{
			MethodName: "AddFilePrompt",
			Handler:    _ProfileService_AddFilePrompt_Handler,
		},
		{
			MethodName: "UpdateFilePrompt",
			Handler:    _ProfileService_UpdateFilePrompt_Handler,
		},
		{
			MethodName: "UpdatePrompt",
			Handler:    _ProfileService_UpdatePrompt_Handler,
		},
		{
			MethodName: "UpdatePromptsPositions",
			Handler:    _ProfileService_UpdatePromptsPositions_Handler,
		},
		{
			MethodName: "DeletePrompt",
			Handler:    _ProfileService_DeletePrompt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/ports/grpc/profiles.proto",
}
