events {
    worker_connections  1024;
}

http {
    server {
        listen 80;

        # Define a location block for /api/v0/auth requests
        location ~ ^/api/v0/auth {
            proxy_pass http://gateway:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Define a location block for /api/v0/user/*/profile requests
        location ~ ^/api/v0/users/[^/]+/profile {
            proxy_pass http://gateway:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Define a location block for /api/v0/user/*/prompts requests
        location ~ ^/api/v0/users/[^/]+/prompts {
            proxy_pass http://gateway:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location ~ ^/media/[^/]+ {
            proxy_pass http://minio:9000;
        }

        # Generic location block to catch any other /api/v0/ requests
        location ~ ^/api/v0/ {
            # You can define a default proxy_pass here if needed
            # For example, to proxy to a default service
            # proxy_pass http://default-service:8080;
            # Or simply return a 404 if no specific service is defined for the request
            return 404;
        }

    }
}